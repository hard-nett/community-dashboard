/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ConfigResponse, ExecuteMsg, Uint128, InstantiateMsg, IsClaimedResponse, MerkleRootResponse, QueryMsg } from "./HeadstashContract.types";
export interface HeadstashContractReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  merkleRoot: () => Promise<MerkleRootResponse>;
  isClaimed: ({
    address
  }: {
    address: string;
  }) => Promise<IsClaimedResponse>;
  totalClaimed: () => Promise<TotalClaimedResponse>;
}
export class HeadstashContractQueryClient implements HeadstashContractReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.merkleRoot = this.merkleRoot.bind(this);
    this.isClaimed = this.isClaimed.bind(this);
    this.totalClaimed = this.totalClaimed.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  merkleRoot = async (): Promise<MerkleRootResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      merkle_root: {}
    });
  };
  isClaimed = async ({
    address
  }: {
    address: string;
  }): Promise<IsClaimedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_claimed: {
        address
      }
    });
  };
  totalClaimed = async (): Promise<TotalClaimedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_claimed: {}
    });
  };
}
export interface HeadstashContractInterface extends HeadstashContractReadOnlyInterface {
  contractAddress: string;
  sender: string;
  claim: ({
    amount,
    ethPubkey,
    ethSig,
    proof
  }: {
    amount: Uint128;
    ethPubkey: string;
    ethSig: string;
    proof: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  clawBack: ({
    recipient
  }: {
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  pause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  resume: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class HeadstashContractClient extends HeadstashContractQueryClient implements HeadstashContractInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claim = this.claim.bind(this);
    this.clawBack = this.clawBack.bind(this);
    this.pause = this.pause.bind(this);
    this.resume = this.resume.bind(this);
  }

  claim = async ({
    amount,
    ethPubkey,
    ethSig,
    proof
  }: {
    amount: Uint128;
    ethPubkey: string;
    ethSig: string;
    proof: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        amount,
        eth_pubkey: ethPubkey,
        eth_sig: ethSig,
        proof
      }
    }, fee, memo, _funds);
  };
  clawBack = async ({
    recipient
  }: {
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claw_back: {
        recipient
      }
    }, fee, memo, _funds);
  };
  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, _funds);
  };
  resume = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      resume: {}
    }, fee, memo, _funds);
  };
}